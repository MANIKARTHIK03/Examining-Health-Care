import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('HospitalData.csv')


print(df.head(11))  


num_rows, num_cols = df.shape
print(f"Number of rows: {num_rows}")
print(f"Number of columns: {num_cols}")



df.info() 


df.describe(include='all')



distinct_count = df[['Department', 'Ward_Type', 'Type of Admission', 'Severity of Illness']].nunique()
print(distinct_count)


df.dropna(inplace=True)  
df.reset_index(drop=True, inplace=True)  


df[['Age', 'Stay']] = df[['Age', 'Stay']].replace('Nov-20', '11-20')


df.drop_duplicates(inplace=True)  
df.reset_index(drop=True, inplace=True)  



department_count = df.groupby('Department')['case_id'].count().reset_index()

plt.figure(figsize=(8, 6))
plt.pie(department_count['case_id'], labels=department_count['Department'], autopct='%1.1f%%')
plt.title('Distribution of case_id by Department')
plt.show()

severity_counts = df.groupby('Severity of Illness')['case_id'].nunique().reset_index()

plt.figure(figsize=(7, 4))
plt.bar(severity_counts['Severity of Illness'], severity_counts['case_id'], color=['red', 'blue', 'green'])
plt.xlabel('Severity of Illness')
plt.ylabel('patient count')
plt.title('patient count by Severity of Illness')
plt.show()

df_sorted = df.sort_values('Age')


plt.figure(figsize=(8, 6))
sns.countplot(data=df_sorted, x='Age')
plt.xlabel('Age')
plt.ylabel('patient_Count')
plt.title('Patients count by Age')
plt.show()


admission_stay_counts = df.groupby(['Type of Admission', 'Stay'])['case_id'].count().reset_index()

admission_stay_pivot = admission_stay_counts.pivot(index='Stay', columns='Type of Admission', values='case_id')

admission_stay_pivot.plot(kind='bar', stacked=True, figsize=(9, 6))
plt.xlabel('Stay')
plt.ylabel('Count')
plt.title('Type of Admission by Stay')
plt.legend(title='Type of Admission')
plt.show()



plt.figure(figsize=(10, 6))
sns.boxplot(data=df, x='Severity of Illness', y='Bed Grade')
plt.xlabel('Severity of Illness')
plt.ylabel('Bed Grade')
plt.title('Distribution of Bed Grade by Severity of Illness')
plt.show()

plt.figure(figsize=(8, 4))
sns.countplot(data=df, x='Ward_Type', hue='Department')
plt.xlabel('Ward Type')
plt.ylabel('Count')
plt.title('Count of Cases by Ward Type and Department')
plt.legend(title='Department')
plt.show()


plt.figure(figsize=(10, 6))
plt.hist(df['Admission_Deposit'], bins=30, edgecolor='black')
plt.xlabel('Admission Deposit')
plt.ylabel('Count')
plt.title('Distribution of Admission Deposit')
plt.show()


rooms_count = df.groupby('Hospital_code')['Available Extra Rooms in Hospital'].sum().reset_index()

plt.figure(figsize=(10, 6))
plt.bar(rooms_count['Hospital_code'], rooms_count['Available Extra Rooms in Hospital'])
plt.xlabel('Hospital_code')
plt.ylabel('Count of Available Extra Rooms')
plt.title('Count of Available Extra Rooms in Hospital by Hospital_code')
plt.xticks(rooms_count['Hospital_code'])
plt.grid(True)
plt.show()


import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np


if df.empty:
    print("Error: DataFrame is empty. Please ensure it has data.")
    exit()


numeric_df = df.select_dtypes(include=[np.number]) 

if numeric_df.isnull().values.any():
    print("Warning: DataFrame contains missing values. Consider handling them (dropna, imputation).")


correlation_matrix = numeric_df.corr(method='spearman') 

plt.figure(figsize=(8, 5))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm')
plt.title('Correlation Matrix')
plt.show()

# Uni-variant analysis

plt.figure(figsize=(10, 6))
sns.histplot(df['Age'], bins=20, kde=True, color='skyblue')
plt.title("Distribution of Age", fontsize=16)
plt.xlabel("Age", fontsize=14)
plt.ylabel("Frequency", fontsize=14)
plt.show()


plt.figure(figsize=(10, 6))
sns.countplot(x='Type of Admission', data=df, palette='Set2', order=df['Type of Admission'].value_counts().index)
plt.title("Count of Each Type of Admission", fontsize=16)
plt.xlabel("Type of Admission", fontsize=14)
plt.ylabel("Count", fontsize=14)
plt.show()


# Bi-Variate Analysis


plt.figure(figsize=(10, 6))
sns.boxplot(x='Severity of Illness', y='Admission_Deposit', data=df, palette='pastel')
plt.title("Admission Deposit vs. Severity of Illness", fontsize=16)
plt.xlabel("Severity of Illness", fontsize=14)
plt.ylabel("Admission Deposit", fontsize=14)
plt.show()


ward_stay_data = df.groupby(['Ward_Type', 'Stay']).size().unstack(fill_value=0)
ward_stay_data.plot(kind='bar', stacked=True, figsize=(12, 6), colormap='viridis')
plt.title("Ward Type vs. Stay (Stacked Bar Chart)", fontsize=16)
plt.xlabel("Ward Type", fontsize=14)
plt.ylabel("Count", fontsize=14)
plt.legend(title='Stay', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()


# Multi-variate analysis

heatmap_data = df.groupby(['Severity of Illness', 'Stay'])['Visitors with Patient'].mean().unstack()
plt.figure(figsize=(12, 6))
sns.heatmap(heatmap_data, annot=True, fmt='.1f', cmap='coolwarm')
plt.title("Heatmap of Visitors with Patient by Severity and Stay", fontsize=16)
plt.xlabel("Stay", fontsize=14)
plt.ylabel("Severity of Illness", fontsize=14)
plt.show()


admission_stay_data = df.groupby(['City_Code_Patient', 'Type of Admission', 'Stay']).size().unstack(fill_value=0)
admission_stay_data.plot(kind='bar', figsize=(14, 8), colormap='plasma', width=0.8)
plt.title("City Code vs. Type of Admission and Stay", fontsize=16)
plt.xlabel("City Code", fontsize=14)
plt.ylabel("Count", fontsize=14)
plt.legend(title='Stay', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()


